{"version":3,"sources":["Auth.tsx","Page.tsx","http.ts","QuestionsData.ts","AppSettings.ts","PageTitle.tsx","Styles.ts","Store.ts","user.png","Icons.tsx","Header.tsx","Question.tsx","QuestionList.tsx","HomePage.tsx","SearchPage.tsx","SignInPage.tsx","NotFoundPage.tsx","Answer.tsx","AnswerList.tsx","QuestionPage.tsx","SignOutPage.tsx","AuthorizedPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Auth0Context","React","createContext","isAuthenticated","signIn","signOut","loading","useAuth","useContext","AuthProvider","children","useState","setIsAuthenticated","undefined","user","setUser","auth0Client","setAuth0Client","setLoading","useEffect","initAuth0","a","createAuth0Client","authSettings","auth0FromHook","window","location","pathname","search","indexOf","handleRedirectCallback","replace","origin","isAuthenticatedFromHook","getUser","getAuth0ClientFromState","Error","Provider","value","loginWithRedirect","logout","client_id","returnTo","getAccessToken","getTokenSilently","accessToken","Page","title","css","http","config","request","Request","webAPIUrl","path","method","headers","body","JSON","stringify","set","fetch","response","ok","json","mapQuestionFromServer","question","created","Date","answers","map","answer","getUnansweredQuestions","result","getQuestion","questionId","searchQuestions","criteria","postQuestion","postAnswer","domain","redirect_uri","scope","audience","PageTitle","gray1","gray2","gray3","gray5","gray6","primary2","accent2","fontFamily","fontSize","FieldContainer","styled","div","Fieldset","fieldset","FieldLabel","label","baseFieldCSS","FieldInput","input","FieldTextArea","textarea","FieldError","FormButtonContainer","PrimaryButton","button","SubmissionSuccess","StatusText","initialQuestionState","unanswered","viewing","searched","GETTINGUNANSWEREDQUESTIONS","GOTUNANSWEREDQUESTIONS","GETTINGQUESTION","GOTQUESTION","SEARCHINGQUESTIONS","SEARCHEDQUESTIONS","rootReducer","combineReducers","questions","state","action","type","UserIcon","src","alt","buttonStyle","Header","navigate","useNavigate","useForm","register","handleSubmit","useSearchParams","get","to","process","onSubmit","placeholder","defaultValue","name","Question","data","showContent","content","length","substring","userName","toLocaleDateString","toLocaleTimeString","QuestionList","renderItem","HomePage","useDispatch","setQuestions","questionsLoading","setQuestionsLoading","cancelled","doGetUnansweredQuestions","unansweredQuestions","onClick","SearchPage","doSearch","foundResults","SignInPage","NotFoundPage","Answer","AnswerList","answerId","QuestionPage","setQuestion","successfullySubmitted","setSuccessfullySubmitted","useParams","doGetQuestion","foundQuestion","Number","submitForm","mode","formState","errors","Fragment","disabled","isSubmitting","htmlFor","id","required","minLength","SignOutPage","message","AuthorizedPage","AskPage","lazy","store","createStore","App","Auth","element","Suspense","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c69463a2.chunk.js","sourcesContent":["import React from 'react';\r\nimport createAuth0Client from '@auth0/auth0-spa-js';\r\nimport Auth0Client from '@auth0/auth0-spa-js/dist/typings/Auth0Client';\r\nimport { authSettings } from './AppSettings';\r\n\r\ninterface Auth0User {\r\n  name?: string;\r\n  email?: string;\r\n}\r\ninterface IAuth0Context {\r\n  isAuthenticated: boolean;\r\n  user?: Auth0User;\r\n  signIn: () => void;\r\n  signOut: () => void;\r\n  loading: boolean;\r\n}\r\n\r\nexport const Auth0Context = React.createContext<IAuth0Context>({\r\n  isAuthenticated: false,\r\n  signIn: () => {},\r\n  signOut: () => {},\r\n  loading: true,\r\n});\r\n\r\nexport const useAuth = () => React.useContext(Auth0Context);\r\n\r\nexport const AuthProvider: React.FC = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = React.useState<boolean>(false);\r\n  const [user, setUser] = React.useState<Auth0User | undefined>(undefined);\r\n  const [auth0Client, setAuth0Client] = React.useState<Auth0Client>();\r\n  const [loading, setLoading] = React.useState<boolean>(true);\r\n\r\n  React.useEffect(() => {\r\n    const initAuth0 = async () => {\r\n      setLoading(true);\r\n      const auth0FromHook = await createAuth0Client(authSettings);\r\n      setAuth0Client(auth0FromHook);\r\n      if (\r\n        window.location.pathname === '/signin-callback' &&\r\n        window.location.search.indexOf('code=') > -1\r\n      ) {\r\n        await auth0FromHook.handleRedirectCallback();\r\n        window.location.replace(window.location.origin);\r\n      }\r\n      const isAuthenticatedFromHook = await auth0FromHook.isAuthenticated();\r\n      if (isAuthenticatedFromHook) {\r\n        const user = await auth0FromHook.getUser();\r\n        setUser(user);\r\n      }\r\n      setIsAuthenticated(isAuthenticatedFromHook);\r\n      setLoading(false);\r\n    };\r\n    initAuth0();\r\n  }, []);\r\n\r\n  const getAuth0ClientFromState = () => {\r\n    if (auth0Client === undefined) {\r\n      throw new Error('Auth0 client not set');\r\n    }\r\n    return auth0Client;\r\n  };\r\n\r\n  return (\r\n    <Auth0Context.Provider\r\n      value={{\r\n        isAuthenticated,\r\n        user,\r\n        signIn: () => getAuth0ClientFromState().loginWithRedirect(),\r\n        signOut: () =>\r\n          getAuth0ClientFromState().logout({\r\n            client_id: authSettings.client_id,\r\n            returnTo: window.location.origin + '/signout-callback',\r\n          }),\r\n        loading,\r\n      }}\r\n    >\r\n      {children}\r\n    </Auth0Context.Provider>\r\n  );\r\n};\r\n\r\nexport const getAccessToken = async () => {\r\n  const auth0FromHook = await createAuth0Client(authSettings);\r\n  const accessToken = await auth0FromHook.getTokenSilently();\r\n  return accessToken;\r\n};\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { PageTitle } from './PageTitle';\r\ninterface Props {\r\n  title?: string;\r\n  children: React.ReactNode;\r\n}\r\nexport const Page = ({ title, children }: Props) => (\r\n  <div\r\n    css={css`\r\n      margin: 50px auto 20px auto;\r\n      padding: 30px 20px;\r\n      max-width: 600px;\r\n    `}\r\n  >\r\n    {title && <PageTitle>{title}</PageTitle>}\r\n    {children}\r\n  </div>\r\n);\r\n","import { webAPIUrl } from './AppSettings';\r\n\r\nexport interface HttpRequest<REQB> {\r\n  path: string;\r\n  method?: string;\r\n  body?: REQB;\r\n  accessToken?: string;\r\n}\r\n\r\nexport interface HttpResponse<RESB> {\r\n  ok: boolean;\r\n  body?: RESB;\r\n}\r\n\r\nexport const http = async <RESB, REQB = undefined>(\r\n  config: HttpRequest<REQB>,\r\n): Promise<HttpResponse<RESB>> => {\r\n  const request = new Request(`${webAPIUrl}${config.path}`, {\r\n    method: config.method || 'get',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: config.body ? JSON.stringify(config.body) : undefined,\r\n  });\r\n\r\n  if (config.accessToken) {\r\n    request.headers.set('authorization', `bearer ${config.accessToken}`);\r\n  }\r\n\r\n  const response = await fetch(request);\r\n  if (response.ok) {\r\n    const body = await response.json();\r\n    return { ok: response.ok, body };\r\n  } else {\r\n    return { ok: response.ok };\r\n  }\r\n};\r\n\r\nconst logError = async (request: Request, response: Response) => {\r\n  const contentType = response.headers.get('content-type');\r\n  let body: any;\r\n  if (contentType && contentType.indexOf('application/json') !== -1) {\r\n    body = await response.json();\r\n  } else {\r\n    body = await response.text();\r\n  }\r\n  console.error(\r\n    `Error requesting ${request.method}  \r\n       ${request.url}`,\r\n    body,\r\n  );\r\n};\r\n","import { http } from './http';\r\nimport { getAccessToken } from './Auth';\r\n\r\nexport interface QuestionData {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n  answers: AnswerData[];\r\n}\r\n\r\nexport interface QuestionDataFromServer {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: string;\r\n  answers: Array<{\r\n    answerId: number;\r\n    content: string;\r\n    userName: string;\r\n    created: string;\r\n  }>;\r\n}\r\n\r\nexport interface AnswerData {\r\n  answerId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\n// const questions: QuestionData[] = [\r\n//   {\r\n//     questionId: 1,\r\n//     title: 'Why should I learn TypeScript?',\r\n//     content:\r\n//       'TypeScript seems to be getting popular so I wondered whether it is worth my time learning it? What benefits does it give over JavaScript?',\r\n//     userName: 'Bob',\r\n//     created: new Date(),\r\n//     answers: [\r\n//       {\r\n//         answerId: 1,\r\n//         content: 'To catch problems earlier speeding up your developments',\r\n//         userName: 'Jane',\r\n//         created: new Date(),\r\n//       },\r\n//       {\r\n//         answerId: 2,\r\n//         content:\r\n//           'So, that you can use the JavaScript features of tomorrow, today',\r\n//         userName: 'Fred',\r\n//         created: new Date(),\r\n//       },\r\n//     ],\r\n//   },\r\n//   {\r\n//     questionId: 2,\r\n//     title: 'Which state management tool should I use?',\r\n//     content:\r\n//       'There seem to be a fair few state management tools around for React - React, Unstated, ... Which one should I use?',\r\n//     userName: 'Bob',\r\n//     created: new Date(),\r\n//     answers: [],\r\n//   },\r\n// ];\r\n\r\n// export const getUnansweredQuestions = (): QuestionData[] => {\r\n//   return questions.filter((q) => q.answers.length === 0);\r\n// };\r\n\r\n// export const getUnansweredQuestions = async (): Promise<QuestionData[]> => {\r\n//   let unansweredQuestions: QuestionData[] = [];\r\n//   const response = await fetch('https://localhost:44346/api/questions');\r\n//   console.log('response ', response);\r\n//   unansweredQuestions = await response.json();\r\n//   return unansweredQuestions.map((question) => ({\r\n//     ...question,\r\n//     created: new Date(question.created),\r\n//   }));\r\n// };\r\n\r\nexport const mapQuestionFromServer = (\r\n  question: QuestionDataFromServer,\r\n): QuestionData => ({\r\n  ...question,\r\n  created: new Date(question.created),\r\n  answers: question.answers\r\n    ? question.answers.map((answer) => ({\r\n        ...answer,\r\n        created: new Date(answer.created),\r\n      }))\r\n    : [],\r\n});\r\n\r\nexport const getUnansweredQuestions = async (): Promise<QuestionData[]> => {\r\n  const result = await http<QuestionDataFromServer[]>({\r\n    path: '/questions/unanswered',\r\n  });\r\n  if (result.ok && result.body) {\r\n    return result.body.map(mapQuestionFromServer);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getQuestion = async (\r\n  questionId: number,\r\n): Promise<QuestionData | null> => {\r\n  const result = await http<QuestionDataFromServer>({\r\n    path: `/questions/${questionId}`,\r\n  });\r\n  if (result.ok && result.body) {\r\n    return mapQuestionFromServer(result.body);\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const searchQuestions = async (\r\n  criteria: string,\r\n): Promise<QuestionData[]> => {\r\n  const result = await http<QuestionDataFromServer[]>({\r\n    path: `/questions?search=${criteria}`,\r\n  });\r\n  if (result.ok && result.body) {\r\n    return result.body.map(mapQuestionFromServer);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport interface PostQuestionData {\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport const postQuestion = async (\r\n  question: PostQuestionData,\r\n): Promise<QuestionData | undefined> => {\r\n  const accessToken = await getAccessToken();\r\n  const result = await http<QuestionDataFromServer, PostQuestionData>({\r\n    path: '/questions',\r\n    method: 'post',\r\n    body: question,\r\n    accessToken,\r\n  });\r\n  if (result.ok && result.body) {\r\n    return mapQuestionFromServer(result.body);\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport interface PostAnswerData {\r\n  questionId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport const postAnswer = async (\r\n  answer: PostAnswerData,\r\n): Promise<AnswerData | undefined> => {\r\n  const accessToken = await getAccessToken();\r\n  const result = await http<AnswerData, PostAnswerData>({\r\n    path: '/questions/answer',\r\n    method: 'post',\r\n    body: answer,\r\n    accessToken,\r\n  });\r\n  if (result.ok) {\r\n    return result.body;\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n","export const server =\r\n  process.env.REACT_APP_ENV === 'production'\r\n    ? 'https://qanda20211024124634.azurewebsites.net'\r\n    : process.env.REACT_APP_ENV === 'staging'\r\n    ? 'https://qanda20211024181952-staging.azurewebsites.net'\r\n    : 'https://localhost:44346/';\r\n\r\nexport const webAPIUrl = `${server}/api`;\r\n\r\nexport const authSettings = {\r\n  domain: 'https://dev-1y148-mk.us.auth0.com',\r\n  client_id: '7GubTNiK0VjDWtBLtHccNEFxXV7XYYzM',\r\n  redirect_uri: window.location.origin + '/signin-callback',\r\n  scope: 'openid profile QandAAPI email',\r\n  audience: 'https://qanda',\r\n};\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\nexport const PageTitle = ({ children }: Props) => (\r\n  <h2\r\n    css={css`\r\n      font-size: 15px;\r\n      font-weight: bold;\r\n      margin: 10px 0px 5px;\r\n      text-align: center;\r\n      text-transform: uppercase;\r\n    `}\r\n  >\r\n    {children}\r\n  </h2>\r\n);\r\n","import styled from '@emotion/styled';\r\nimport { css } from '@emotion/react';\r\n\r\nexport const gray1 = '#383737';\r\nexport const gray2 = '#5c5a5a';\r\nexport const gray3 = '#857c81';\r\nexport const gray4 = '#b9b9b9';\r\nexport const gray5 = '#e3e2e2';\r\nexport const gray6 = '#f7f8fa';\r\nexport const primary1 = '#681c41';\r\nexport const primary2 = '#824c67';\r\nexport const accent1 = '#dbb365';\r\nexport const accent2 = '#efd197';\r\nexport const fontFamily = \"'Segoe UI', 'Helvetica Neue',sans-serif\";\r\nexport const fontSize = '16px';\r\n\r\nexport const FieldContainer = styled.div`\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const Fieldset = styled.fieldset`\r\n  margin: 10px auto 0 auto;\r\n  padding: 30px;\r\n  width: 350px;\r\n  background-color: ${gray6};\r\n  border-radius: 4px;\r\n  border: 1px solid ${gray5};\r\n  box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n`;\r\n\r\nexport const FieldLabel = styled.label`\r\n  font-weight: bold;\r\n`;\r\n\r\nconst baseFieldCSS = css`\r\n  box-sizing: border-box;\r\n  font-family: ${fontFamily};\r\n  font-size: ${fontSize};\r\n  margin-bottom: 5px;\r\n  padding: 8px 10px;\r\n  border: 1px solid ${gray5};\r\n  border-radius: 3px;\r\n  color: ${gray2};\r\n  background-color: white;\r\n  width: 100%;\r\n  :focus {\r\n    outline-color: ${gray5};\r\n  }\r\n  :disabled {\r\n    background-color: ${gray6};\r\n  }\r\n`;\r\n\r\nexport const FieldInput = styled.input`\r\n  ${baseFieldCSS}\r\n`;\r\n\r\nexport const FieldTextArea = styled.textarea`\r\n  ${baseFieldCSS}\r\n  height: 100px;\r\n`;\r\n\r\nexport const FieldError = styled.div`\r\n  font-size: 12px;\r\n  color: red;\r\n`;\r\n\r\nexport const FormButtonContainer = styled.div`\r\n  margin: 30px 0px 0px 0px;\r\n  padding: 20px 0px 0px 0px;\r\n  border-top: 1px solid ${gray5};\r\n`;\r\n\r\nexport const PrimaryButton = styled.button`\r\n  background-color: ${primary2};\r\n  border-color: ${primary2};\r\n  border-style: solid;\r\n  border-radius: 5px;\r\n  font-family: ${fontFamily};\r\n  font-size: ${fontSize};\r\n  padding: 5px 10px;\r\n  color: white;\r\n  cursor: pointer;\r\n  :hover {\r\n    background-color: ${primary1};\r\n  }\r\n  :focus {\r\n    outline-color: ${primary2};\r\n  }\r\n  :disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nexport const SubmissionSuccess = styled.div`\r\n  margin-top: 10px;\r\n  color: green;\r\n`;\r\nexport const SubmissionFailure = styled.div`\r\n  margin-top: 10px;\r\n  color: red;\r\n`;\r\n\r\nexport const StatusText = styled.div`\r\n  text-align: center;\r\n`;\r\n","import { QuestionData } from './QuestionsData';\r\nimport { Store, createStore, combineReducers } from 'redux';\r\n\r\ninterface QuestionsState {\r\n  readonly loading: boolean;\r\n  readonly unanswered: QuestionData[];\r\n  readonly viewing: QuestionData | null;\r\n  readonly searched: QuestionData[];\r\n}\r\n\r\nexport interface AppState {\r\n  readonly questions: QuestionsState;\r\n}\r\n\r\nconst initialQuestionState: QuestionsState = {\r\n  loading: false,\r\n  unanswered: [],\r\n  viewing: null,\r\n  searched: [],\r\n};\r\n\r\nexport const GETTINGUNANSWEREDQUESTIONS = 'GettingUnansweredQuestions';\r\n\r\nexport const gettingUnansweredQuestionsAction = () =>\r\n  ({\r\n    type: GETTINGUNANSWEREDQUESTIONS,\r\n  } as const);\r\n\r\nexport const GOTUNANSWEREDQUESTIONS = 'GotUnansweredQuestions';\r\nexport const gotUnansweredQuestionsAction = (questions: QuestionData[]) =>\r\n  ({\r\n    type: GOTUNANSWEREDQUESTIONS,\r\n    questions: questions,\r\n  } as const);\r\n\r\nexport const GETTINGQUESTION = 'GettingQuestion';\r\nexport const gettingQuestionAction = () =>\r\n  ({\r\n    type: GETTINGQUESTION,\r\n  } as const);\r\nexport const GOTQUESTION = 'GotQuestion';\r\nexport const gotQuestionAction = (question: QuestionData | null) =>\r\n  ({\r\n    type: GOTQUESTION,\r\n    question: question,\r\n  } as const);\r\n\r\nexport const SEARCHINGQUESTIONS = 'SearchingQuestions';\r\nexport const searchingQuestionsAction = () =>\r\n  ({\r\n    type: SEARCHINGQUESTIONS,\r\n  } as const);\r\nexport const SEARCHEDQUESTIONS = 'SearchedQuestions';\r\nexport const searchedQuestionsAction = (questions: QuestionData[]) =>\r\n  ({\r\n    type: SEARCHEDQUESTIONS,\r\n    questions,\r\n  } as const);\r\n\r\ntype QuestionsActions =\r\n  | ReturnType<typeof gettingUnansweredQuestionsAction>\r\n  | ReturnType<typeof gotUnansweredQuestionsAction>\r\n  | ReturnType<typeof gettingQuestionAction>\r\n  | ReturnType<typeof gotQuestionAction>\r\n  | ReturnType<typeof searchingQuestionsAction>\r\n  | ReturnType<typeof searchedQuestionsAction>;\r\n\r\nconst questionsReducer = (\r\n  state = initialQuestionState,\r\n  action: QuestionsActions,\r\n) => {\r\n  switch (action.type) {\r\n    case GETTINGUNANSWEREDQUESTIONS: {\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    }\r\n    case GOTUNANSWEREDQUESTIONS: {\r\n      return {\r\n        ...state,\r\n        unanswered: action.questions,\r\n        loading: false,\r\n      };\r\n    }\r\n    case GETTINGQUESTION: {\r\n      return {\r\n        ...state,\r\n        viewing: null,\r\n        loading: true,\r\n      };\r\n    }\r\n    case GOTQUESTION: {\r\n      return {\r\n        ...state,\r\n        viewing: action.question,\r\n        loading: false,\r\n      };\r\n    }\r\n    case SEARCHINGQUESTIONS: {\r\n      return {\r\n        ...state,\r\n        searched: [],\r\n        loading: true,\r\n      };\r\n    }\r\n    case SEARCHEDQUESTIONS: {\r\n      return {\r\n        ...state,\r\n        searched: action.questions,\r\n        loading: false,\r\n      };\r\n    }\r\n  }\r\n  return state;\r\n};\r\n\r\nconst rootReducer = combineReducers<AppState>({\r\n  questions: questionsReducer,\r\n});\r\n\r\nexport function configureStore(): Store<AppState> {\r\n  const store = createStore(rootReducer, undefined);\r\n  return store;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/user.33e7df09.png\";","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport user from './user.png';\r\nexport const UserIcon = () => (\r\n  <img\r\n    src={user}\r\n    alt=\"User\"\r\n    css={css`\r\n      width: 12px;\r\n      opacity: 0.6;\r\n    `}\r\n  />\r\n);\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { fontFamily, fontSize, gray1, gray2, gray5 } from './Styles';\r\nimport React from 'react';\r\nimport { UserIcon } from './Icons';\r\nimport { Link, useSearchParams, useNavigate } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useAuth } from './Auth';\r\n\r\nconst buttonStyle = css`\r\n  font-family: ${fontFamily};\r\n  font-size: ${fontSize};\r\n  padding: 5px 10px;\r\n  background-color: transparent;\r\n  color: ${gray2};\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  :focus {\r\n    outline-color: ${gray5};\r\n  }\r\n  span {\r\n    margin-left: 7px;\r\n  }\r\n`;\r\n\r\ntype FormData = {\r\n  search: string;\r\n};\r\n\r\nexport const Header = () => {\r\n  const navigate = useNavigate();\r\n  const { register, handleSubmit } = useForm<FormData>();\r\n  const [searchParams] = useSearchParams();\r\n  const criteria = searchParams.get('criteria') || '';\r\n\r\n  const submitForm = ({ search }: FormData) => {\r\n    navigate(`search?criteria=${search}`);\r\n  };\r\n\r\n  const { isAuthenticated, user, loading } = useAuth();\r\n\r\n  return (\r\n    <div\r\n      css={css`\r\n        position: fixed;\r\n        box-sizing: border-box;\r\n        top: 0;\r\n        width: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        padding: 10px 20px;\r\n        background-color: #fff;\r\n        border-bottom: 1px solid ${gray5};\r\n        box-shadow: 0 3px 7px 0 rgba(110, 112, 114, 0.21);\r\n      `}\r\n    >\r\n      <Link\r\n        to=\"/\"\r\n        css={css`\r\n          font-size: 24px;\r\n          font-weight: bold;\r\n          color: ${gray1};\r\n          text-decoration: none;\r\n        `}\r\n      >\r\n        Q & A\r\n        <span\r\n          css={css`\r\n            margin-left: 5px;\r\n            font-size: 14px;\r\n            font-weight: normal;\r\n          `}\r\n        >\r\n          {process.env.REACT_APP_ENV || 'dev'}\r\n        </span>\r\n      </Link>\r\n      <form onSubmit={handleSubmit(submitForm)}>\r\n        <input\r\n          {...register('search')}\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          defaultValue={criteria}\r\n          css={css`\r\n            box-sizing: border-box;\r\n            font-family: ${fontFamily};\r\n            font-size: ${fontSize};\r\n            padding: 8px 10px;\r\n            border: 1px solid ${gray5};\r\n            border-radius: 3px;\r\n            color: ${gray2};\r\n            background-color: white;\r\n            width: 200px;\r\n            height: 30px;\r\n            :focus {\r\n              outline-color: ${gray5};\r\n            }\r\n          `}\r\n        />\r\n      </form>\r\n      <div>\r\n        {!loading &&\r\n          (isAuthenticated ? (\r\n            <div>\r\n              <span>{user!.name}</span>\r\n\r\n              <Link to=\"signout\" css={buttonStyle}>\r\n                <UserIcon />\r\n                <span>Sign Out</span>\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            <Link to=\"signin\" css={buttonStyle}>\r\n              <UserIcon />\r\n              <span>Sign In</span>\r\n            </Link>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { gray2, gray3 } from './Styles';\r\nimport React from 'react';\r\nimport { QuestionData } from './QuestionsData';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Props {\r\n  data: QuestionData;\r\n  showContent?: boolean;\r\n}\r\n\r\nexport const Question = ({ data, showContent = true }: Props) => (\r\n  <div\r\n    css={css`\r\n      padding: 10px 0px;\r\n    `}\r\n  >\r\n    <div\r\n      css={css`\r\n        padding: 10px 0px;\r\n        font-size: 19px;\r\n      `}\r\n    >\r\n      <Link\r\n        css={css`\r\n          text-decoration: none;\r\n          color: ${gray2};\r\n        `}\r\n        to={`/questions/${data.questionId}`}\r\n      >\r\n        {data.title}\r\n      </Link>\r\n    </div>\r\n    {showContent && (\r\n      <div\r\n        css={css`\r\n          padding-bottom: 10px;\r\n          font-size: 15px;\r\n          color: ${gray2};\r\n        `}\r\n      >\r\n        {data.content.length > 50\r\n          ? `${data.content.substring(0, 50)}...`\r\n          : data.content}\r\n      </div>\r\n    )}\r\n    <div\r\n      css={css`\r\n        font-size: 12px;\r\n        font-style: italic;\r\n        color: ${gray3};\r\n      `}\r\n    >\r\n      {`Asked by ${data.userName} on\r\n        ${data.created.toLocaleDateString()} ${data.created.toLocaleTimeString()}`}\r\n    </div>\r\n  </div>\r\n);\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { QuestionData } from './QuestionsData';\r\nimport { Question } from './Question';\r\nimport { accent2, gray5 } from './Styles';\r\n\r\ninterface Props {\r\n  data: QuestionData[];\r\n  renderItem?: (item: QuestionData) => JSX.Element;\r\n}\r\n\r\nexport const QuestionList = ({ data, renderItem }: Props) => (\r\n  <ul\r\n    css={css`\r\n      list-style: none;\r\n      margin: 10px 0 0 0;\r\n      padding: 0px 20px;\r\n      background-color: #fff;\r\n      border-bottom-left-radius: 4px;\r\n      border-bottom-right-radius: 4px;\r\n      border-top: 3px solid ${accent2};\r\n      box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n    `}\r\n  >\r\n    {data.map((question) => (\r\n      <li\r\n        key={question.questionId}\r\n        css={css`\r\n          border-top: 1px solid ${gray5};\r\n          :first-of-type {\r\n            border-top: none;\r\n          }\r\n        `}\r\n      >\r\n        {renderItem ? renderItem(question) : <Question data={question} />}\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { QuestionList } from './QuestionList';\r\nimport { getUnansweredQuestions } from './QuestionsData';\r\nimport { Page } from './Page';\r\nimport { PageTitle } from './PageTitle';\r\nimport { PrimaryButton } from './Styles';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { QuestionData } from './QuestionsData';\r\nimport {\r\n  gettingUnansweredQuestionsAction,\r\n  gotUnansweredQuestionsAction,\r\n  AppState,\r\n} from './Store';\r\nimport { useAuth } from './Auth';\r\n\r\nexport const HomePage = () => {\r\n  const dispatch = useDispatch();\r\n  // const questions = useSelector(\r\n  //   (state: AppState) => state.questions.unanswered,\r\n  // );\r\n  // const questionsLoading = useSelector(\r\n  //   (state: AppState) => state.questions.loading,\r\n  // );\r\n  const [questions, setQuestions] = React.useState<QuestionData[]>([]);\r\n  const [questionsLoading, setQuestionsLoading] = React.useState(true);\r\n\r\n  // React.useEffect(() => {\r\n  //   const doGetUnansweredQuestions = async () => {\r\n  //     dispatch(gettingUnansweredQuestionsAction());\r\n  //     const unansweredQuestions = await getUnansweredQuestions();\r\n  //     dispatch(gotUnansweredQuestionsAction(unansweredQuestions));\r\n  //   };\r\n  //   doGetUnansweredQuestions();\r\n  // }, []);\r\n\r\n  React.useEffect(() => {\r\n    let cancelled = false;\r\n    const doGetUnansweredQuestions = async () => {\r\n      const unansweredQuestions = await getUnansweredQuestions();\r\n      if (!cancelled) {\r\n        setQuestions(unansweredQuestions);\r\n        setQuestionsLoading(false);\r\n      }\r\n    };\r\n    doGetUnansweredQuestions();\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n  }, []);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleAskQuestionClick = () => {\r\n    navigate('ask');\r\n  };\r\n\r\n  const { isAuthenticated } = useAuth();\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: space-between;\r\n        `}\r\n      >\r\n        <PageTitle>Unanswered Questions</PageTitle>\r\n        {isAuthenticated && (\r\n          <PrimaryButton onClick={handleAskQuestionClick}>\r\n            Ask a question\r\n          </PrimaryButton>\r\n        )}\r\n      </div>\r\n      {questionsLoading ? (\r\n        <div>Loading…</div>\r\n      ) : (\r\n        <QuestionList data={questions || []} />\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { QuestionList } from './QuestionList';\r\nimport { QuestionData, searchQuestions } from './QuestionsData';\r\nimport React from 'react';\r\nimport { Page } from './Page';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  AppState,\r\n  searchingQuestionsAction,\r\n  searchedQuestionsAction,\r\n} from './Store';\r\n\r\nexport const SearchPage = () => {\r\n  const dispatch = useDispatch();\r\n  // const questions = useSelector((state: AppState) => state.questions.searched);\r\n  const [searchParams] = useSearchParams();\r\n  const search = searchParams.get('criteria') || '';\r\n  const [questions, setQuestions] = React.useState<QuestionData[]>([]);\r\n\r\n  React.useEffect(() => {\r\n    let cancelled = false;\r\n    const doSearch = async (criteria: string) => {\r\n      const foundResults = await searchQuestions(criteria);\r\n      if (!cancelled) {\r\n        setQuestions(foundResults);\r\n      }\r\n    };\r\n    doSearch(search);\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n  }, [search]);\r\n\r\n  return (\r\n    <Page title=\"Search Results\">\r\n      {search && (\r\n        <p\r\n          css={css`\r\n            font-size: 16px;\r\n            font-style: italic;\r\n            margin-top: 0px;\r\n          `}\r\n        >\r\n          for \"{search}\"\r\n        </p>\r\n      )}\r\n      <QuestionList data={questions} />\r\n    </Page>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Page } from './Page';\r\nimport { StatusText } from './Styles';\r\nimport { useAuth } from './Auth';\r\n\r\ntype SigninAction = 'signin' | 'signin-callback';\r\ninterface Props {\r\n  action: SigninAction;\r\n}\r\n\r\nexport const SignInPage = ({ action }: Props) => {\r\n  const { signIn } = useAuth();\r\n  if (action === 'signin') {\r\n    signIn();\r\n  }\r\n  return (\r\n    <Page title=\"Sign In\">\r\n      <StatusText>Signing in ...</StatusText>\r\n    </Page>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Page } from './Page';\r\nexport const NotFoundPage = () => <Page title=\"Page Not Found\">{null}</Page>;\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { AnswerData } from './QuestionsData';\r\nimport { gray3 } from './Styles';\r\n\r\ninterface Props {\r\n  data: AnswerData;\r\n}\r\n\r\nexport const Answer = ({ data }: Props) => (\r\n  <div\r\n    css={css`\r\n      padding: 10px 0px;\r\n    `}\r\n  >\r\n    <div\r\n      css={css`\r\n        padding: 10px 0px;\r\n        font-size: 13px;\r\n      `}\r\n    >\r\n      {data.content}\r\n    </div>\r\n    <div\r\n      css={css`\r\n        font-size: 12px;\r\n        font-style: italic;\r\n        color: ${gray3};\r\n      `}\r\n    >\r\n      {`Answered by ${data.userName} on\r\n        ${data.created.toLocaleDateString()} \r\n        ${data.created.toLocaleTimeString()}`}\r\n    </div>\r\n  </div>\r\n);\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { AnswerData } from './QuestionsData';\r\nimport { Answer } from './Answer';\r\nimport { gray5 } from './Styles';\r\n\r\ninterface Props {\r\n  data: AnswerData[];\r\n}\r\n\r\nexport const AnswerList = ({ data }: Props) => (\r\n  <ul\r\n    css={css`\r\n      list-style: none;\r\n      margin: 10px 0 0 0;\r\n      padding: 0;\r\n    `}\r\n  >\r\n    {data.map((answer) => (\r\n      <li\r\n        css={css`\r\n          border-top: 1px solid ${gray5};\r\n        `}\r\n        key={answer.answerId}\r\n      >\r\n        <Answer data={answer} />\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n","/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Page } from './Page';\r\nimport { AnswerList } from './AnswerList';\r\nimport {\r\n  gray3,\r\n  gray6,\r\n  Fieldset,\r\n  FieldContainer,\r\n  FieldLabel,\r\n  FieldTextArea,\r\n  FormButtonContainer,\r\n  PrimaryButton,\r\n  FieldError,\r\n  SubmissionSuccess,\r\n} from './Styles';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState, gettingQuestionAction, gotQuestionAction } from './Store';\r\nimport { useAuth } from './Auth';\r\nimport { QuestionData, getQuestion, postAnswer } from './QuestionsData';\r\n\r\ntype FormData = {\r\n  content: string;\r\n};\r\n\r\nexport const QuestionPage = () => {\r\n  const [question, setQuestion] = React.useState<QuestionData | null>(null);\r\n\r\n  // const dispatch = useDispatch();\r\n  // const question = useSelector((state: AppState) => state.questions.viewing);\r\n\r\n  const [successfullySubmitted, setSuccessfullySubmitted] =\r\n    React.useState(false);\r\n\r\n  const { questionId } = useParams();\r\n\r\n  React.useEffect(() => {\r\n    let cancelled = false;\r\n    const doGetQuestion = async (questionId: number) => {\r\n      const foundQuestion = await getQuestion(questionId);\r\n      if (!cancelled) {\r\n        setQuestion(foundQuestion);\r\n      }\r\n    };\r\n    if (questionId) {\r\n      doGetQuestion(Number(questionId));\r\n    }\r\n\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n  }, [questionId]);\r\n\r\n  const submitForm = async (data: FormData) => {\r\n    const result = await postAnswer({\r\n      questionId: question!.questionId,\r\n      content: data.content,\r\n      userName: 'Fred',\r\n      created: new Date(),\r\n    });\r\n    setSuccessfullySubmitted(result ? true : false);\r\n  };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState,\r\n    formState: { errors },\r\n  } = useForm<FormData>({\r\n    mode: 'onBlur',\r\n  });\r\n\r\n  const { isAuthenticated } = useAuth();\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          background-color: white;\r\n          padding: 15px 20px 20px 20px;\r\n          border-radius: 4px;\r\n          border: 1px solid ${gray6};\r\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n        `}\r\n      >\r\n        <div\r\n          css={css`\r\n            font-size: 19px;\r\n            font-weight: bold;\r\n            margin: 10px 0px 5px;\r\n          `}\r\n        >\r\n          {question === null ? '' : question.title}\r\n        </div>\r\n        {question !== null && (\r\n          <React.Fragment>\r\n            <p\r\n              css={css`\r\n                margin-top: 0px;\r\n                background-color: white;\r\n              `}\r\n            >\r\n              {question.content}\r\n            </p>\r\n            <div\r\n              css={css`\r\n                font-size: 12px;\r\n                font-style: italic;\r\n                color: ${gray3};\r\n              `}\r\n            >\r\n              {`Asked by ${question.userName} on\r\n              ${question.created.toLocaleDateString()} \r\n              ${question.created.toLocaleTimeString()}`}\r\n            </div>\r\n            <AnswerList data={question.answers} />\r\n            <AnswerList data={question.answers} />\r\n            {isAuthenticated && (\r\n              <form\r\n                onSubmit={handleSubmit(submitForm)}\r\n                css={css`\r\n                  margin-top: 20px;\r\n                `}\r\n              >\r\n                <Fieldset\r\n                  disabled={formState.isSubmitting || successfullySubmitted}\r\n                >\r\n                  <FieldContainer>\r\n                    <FieldLabel htmlFor=\"content\">Your Answer</FieldLabel>\r\n                    <FieldTextArea\r\n                      id=\"content\"\r\n                      {...register('content', {\r\n                        required: true,\r\n                        minLength: 50,\r\n                      })}\r\n                    />\r\n                    {errors.content && errors.content.type === 'required' && (\r\n                      <FieldError>You must enter the answer</FieldError>\r\n                    )}\r\n                    {errors.content && errors.content.type === 'minLength' && (\r\n                      <FieldError>\r\n                        The answer must be at least 50 characters\r\n                      </FieldError>\r\n                    )}\r\n                  </FieldContainer>\r\n                  <FormButtonContainer>\r\n                    <PrimaryButton type=\"submit\">\r\n                      Submit Your Answer\r\n                    </PrimaryButton>\r\n                  </FormButtonContainer>\r\n                  {successfullySubmitted && (\r\n                    <SubmissionSuccess>\r\n                      Your answer was successfully submitted\r\n                    </SubmissionSuccess>\r\n                  )}\r\n                </Fieldset>\r\n              </form>\r\n            )}\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Page } from './Page';\r\nimport { StatusText } from './Styles';\r\nimport { useAuth } from './Auth';\r\ntype SignoutAction = 'signout' | 'signout-callback';\r\ninterface Props {\r\n  action: SignoutAction;\r\n}\r\nexport const SignOutPage = ({ action }: Props) => {\r\n  let message = 'Signing out ...';\r\n  const { signOut } = useAuth();\r\n  switch (action) {\r\n    case 'signout':\r\n      signOut();\r\n      break;\r\n    case 'signout-callback':\r\n      message = 'You successfully signed out!';\r\n      break;\r\n  }\r\n  return (\r\n    <Page title=\"Sign out\">\r\n      <StatusText>{message}</StatusText>\r\n    </Page>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Page } from './Page';\r\nimport { useAuth } from './Auth';\r\nexport const AuthorizedPage: React.FC = ({ children }) => {\r\n  const { isAuthenticated } = useAuth();\r\n  if (isAuthenticated) {\r\n    return <>{children}</>;\r\n  } else {\r\n    return (\r\n      <Page\r\n        title=\"You do not have access to this \r\n        page\"\r\n      >\r\n        {null}\r\n      </Page>\r\n    );\r\n  }\r\n};\r\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './Store';\nimport { Header } from './Header';\nimport { HomePage } from './HomePage';\nimport { fontFamily, fontSize, gray2 } from './Styles';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { SearchPage } from './SearchPage';\nimport { SignInPage } from './SignInPage';\nimport { NotFoundPage } from './NotFoundPage';\nimport { QuestionPage } from './QuestionPage';\nimport { SignOutPage } from './SignOutPage';\nimport { AuthProvider } from './Auth';\nimport { AuthorizedPage } from './AuthorizedPage';\n\nconst AskPage = React.lazy(() => import('./AskPage'));\n\nconst store = configureStore();\nfunction App() {\n  return (\n    <Provider store={store}>\n      <AuthProvider>\n        <BrowserRouter>\n          <div\n            css={css`\n              font-family: ${fontFamily};\n              font-size: ${fontSize};\n              color: ${gray2};\n            `}\n          >\n            <Header />\n            <Routes>\n              <Route path=\"signin\" element={<SignInPage action=\"signin\" />} />\n              <Route\n                path=\"/signin-callback\"\n                element={<SignInPage action=\"signin-callback\" />}\n              />\n              <Route\n                path=\"signout\"\n                element={<SignOutPage action=\"signout\" />}\n              />\n              <Route\n                path=\"/signout-callback\"\n                element={<SignOutPage action=\"signout-callback\" />}\n              />\n              <Route path=\"\" element={<HomePage />} />\n              <Route path=\"search\" element={<SearchPage />} />\n              <Route\n                path=\"ask\"\n                element={\n                  <React.Suspense\n                    fallback={\n                      <div\n                        css={css`\n                          margin-top: 100px;\n                          text-align: center;\n                        `}\n                      >\n                        Loading...\n                      </div>\n                    }\n                  >\n                    <AuthorizedPage>\n                      <AskPage />\n                    </AuthorizedPage>\n                  </React.Suspense>\n                }\n              />\n              <Route path=\"questions/:questionId\" element={<QuestionPage />} />\n              <Route path=\"*\" element={<NotFoundPage />} />\n            </Routes>\n          </div>\n        </BrowserRouter>\n      </AuthProvider>\n    </Provider>\n  );\n}\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}